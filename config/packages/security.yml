security:
    role_hierarchy:
        ROLE_ADMIN: ROLE_CLIENT
        ROLE_ROOT: ROLE_ADMIN

    encoders:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: ~
            guard:
                authenticators:
                    - App\Security\LoginFormAuthAuthenticator

#        register:
#            anonymous: true
#            guard:
#                authenticators:
#                    - App\Security\LoginFormAuthAuthenticator

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

            logout:
                path: user_logout

# Need more control of what happens after logout?
# Add a success_handler key under logout and
# point it to a service id of a class that implements LogoutSuccessHandlerInterface.
# See: https://symfony.com/doc/current/security.html



    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/product, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

